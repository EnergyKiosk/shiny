mutate(qrcode = qrcode(DF_UID)) |>
st_transform(4326)
###Adress information
gebaeudeadressverzeichnis <- read_delim("data-raw/ch.swisstopo.amtliches-gebaeudeadressverzeichnis/pure_adr.csv") |>
select(BDG_EGID, STN_LABEL, ADR_NUMBER, ZIP_LABEL, COM_CANTON) |>
separate(ZIP_LABEL, c("ZIP", "MUNICIPALITY"), sep = "\\s(?=\\S)") |>
filter(ZIP %in% c("4334", "4332", "4333", "5074")) |>
group_by(BDG_EGID, STN_LABEL, ZIP, MUNICIPALITY, COM_CANTON) |>
summarize(ADR_NUMBER = paste(ADR_NUMBER, collapse = ", "))
#Existierende Solaranlagen
existing_solarroofs <- read_csv("data-raw/ch.bfe.elektrizitaetsproduktionsanlagen/ElectricityProductionPlant.csv") |>
drop_na("_x") |>
st_as_sf(coords = c("_x", "_y"), crs = 2056, remove = FALSE) |>
st_transform(4326)
##Solardach data
create_qr_code <- function(featureId) {
path <- "www/qrcodes"
if(file.exists(file.path(path, paste0(featureid, ".png")))) {
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
png(paste0(path, featureId, ".png"), width = 200, height = 200, units = "px", bg = "white")
plot(qrcode)
dev.off()
}
normalizePath(path, winslash = "/", mustWork = NA)
}
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
head(10) |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
mutate(qrcode = qrcode(DF_UID)) |>
st_transform(4326)
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
head(10) |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
mutate(qrcode = create_qr_code(DF_UID)) |>
st_transform(4326)
##Solardach data
create_qr_code <- function(featureId) {
path <- "www/qrcodes"
if(file.exists(file.path(path, paste0(featureId, ".png")))) {
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
png(paste0(path, featureId, ".png"), width = 200, height = 200, units = "px", bg = "white")
plot(qrcode)
dev.off()
}
normalizePath(path, winslash = "/", mustWork = NA)
}
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
head(10) |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
mutate(qrcode = create_qr_code(DF_UID)) |>
st_transform(4326)
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
head(10) |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
rowwise() |>
mutate(qrcode = create_qr_code(DF_UID)) |>
ungroup() |>
st_transform(4326)
View(solardach)
##Solardach data
create_qr_code <- function(featureId) {
path <- file.path("www/qrcodes", paste0(featureId, ".png"))
if(!file.exists(path)) {
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
png(path, width = 200, height = 200, units = "px", bg = "white")
plot(qrcode)
dev.off()
}
path
}
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
head(10) |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
rowwise() |>
mutate(qrcode = create_qr_code(DF_UID)) |>
ungroup() |>
st_transform(4326)
View(solardach)
##Solardach data
create_qr_code <- function(featureId) {
path <- file.path("www/qrcodes", paste0(featureId, ".png"))
if(!file.exists(path)) {
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
png(path, width = 200, height = 200, units = "px", bg = "white")
plot(qrcode)
dev.off()
}
path
}
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
rowwise() |>
mutate(qrcode = create_qr_code(DF_UID)) |>
ungroup() |>
st_transform(4326)
solardach$Has_Solar = st_intersects(solardach, existing_solarroofs) |> sapply(\(x)length(x)>0)
sisslerfeld <- sisslerfeld |>
st_transform(4326)
##Sisslerfeld
sisslerfeld <- read_sf("data-raw/swissboundaries3d_2023-01_2056_5728.shp/swissBOUNDARIES3D_1_4_TLM_HOHEITSGEBIET.shp",
query = "SELECT NAME as name FROM swissBOUNDARIES3D_1_4_TLM_HOHEITSGEBIET WHERE
NAME in ('Sisseln',	'Stein (AG)', 'MÃ¼nchwilen (AG)', 'Eiken')")
st_bbox(sisslerfeld)
st_bbox(sisslerfeld)  |>
st_as_sfc()  |>
st_as_text()
write_sf(solardach, "data-processed/prepared_data.gpkg", "solardach", delete_layer = TRUE)
sisslerfeld <- sisslerfeld |>
st_transform(4326)
write_sf(solardach, "data-processed/prepared_data.gpkg", "solardach", delete_layer = TRUE)
write_sf(solardach, "data-processed/solardach.geojson")
sfarrow::st_write_parquet(solardach,"data-processed/solardach.parquet")
write_sf(sisslerfeld, "data-processed/prepared_data.gpkg", "sisslerfeld", delete_layer = TRUE)
###Weather data
select_weather_icon <- function(input) {
if(input <= 2.0) {
"clouds"
} else if (input > 2.0 & input <= 6.0) {
"sun-cloud"
} else {
"sun"
}
}
forecast_header <- read.delim("https://data.geo.admin.ch/ch.meteoschweiz.prognosen/punktprognosen/COSMO-E-all-stations.csv", skip=24, na = "-999.0", sep = ";", nrows=1) |> select(-X)
forecast_data <- read.delim("https://data.geo.admin.ch/ch.meteoschweiz.prognosen/punktprognosen/COSMO-E-all-stations.csv", skip=27, na = "-999.0", sep = ";", header=F)
colnames(forecast_data) <- colnames(forecast_header)
forecast_moe <- forecast_data[1:ncol(forecast_data)-1] %>% mutate(time = ymd_hm(time, tz="CET")) |>
select(starts_with(c("stn", "time", "DURSUN"))) |>
filter(stn == "MOE") |>
na.omit()
forecast_final <- mutate(forecast_moe, mean_col = rowMeans(select(forecast_moe, starts_with("DURSUN")), na.rm = TRUE)) |>
mutate(date = date(time)) |>
mutate(wkday = wday(date, label = TRUE, abbr = FALSE)) |>
group_by(date, wkday) |>
summarise(sunhours = round(sum(mean_col) / 3600, 2)) |>
head(3) |>
mutate(icon = sapply(sunhours, select_weather_icon))
write_csv(forecast_final, "data-processed/weather_data.csv", append = FALSE)
runApp()
runApp()
runApp()
?gwd
??gwd
runApp()
##Solardach data
create_qr_code <- function(featureId) {
path <- file.path("/www/qrcodes", paste0(featureId, ".png"))
if(!file.exists(path)) {
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
png(path, width = 200, height = 200, units = "px", bg = "white")
plot(qrcode)
dev.off()
}
path
}
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
rowwise() |>
mutate(qrcode = create_qr_code(DF_UID)) |>
ungroup() |>
st_transform(4326)
##Solardach data
create_qr_code <- function(featureId) {
path <- file.path("www/qrcodes", paste0(featureId, ".png"))
if(!file.exists(path)) {
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
png(path, width = 200, height = 200, units = "px", bg = "white")
plot(qrcode)
dev.off()
}
path
}
runApp()
runApp()
##Solardach data
create_qr_code <- function(featureId) {
path <- file.path("www/qrcodes", paste0(featureId, ".png"))
if(!file.exists(path)) {
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
png(path, width = 200, height = 200, units = "px", bg = "white")
plot(qrcode)
dev.off()
}
file.path("qrcodes", paste0(featureId, ".png"))
}
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
rowwise() |>
mutate(qrcode = create_qr_code(DF_UID)) |>
ungroup() |>
st_transform(4326)
write_sf(solardach, "data-processed/prepared_data.gpkg", "solardach", delete_layer = TRUE)
write_sf(solardach, "data-processed/solardach.geojson")
sfarrow::st_write_parquet(solardach,"data-processed/solardach.parquet")
write_sf(sisslerfeld, "data-processed/prepared_data.gpkg", "sisslerfeld", delete_layer = TRUE)
runApp()
solardach$Has_Solar = st_intersects(solardach, existing_solarroofs) |> sapply(\(x)length(x)>0)
write_sf(solardach, "data-processed/prepared_data.gpkg", "solardach", delete_layer = TRUE)
sfarrow::st_write_parquet(solardach,"data-processed/solardach.parquet")
write_sf(sisslerfeld, "data-processed/prepared_data.gpkg", "sisslerfeld", delete_layer = TRUE)
runApp()
runApp()
runApp()
shiny::runApp()
forecast_moe
forecast_header <- read.delim("https://data.geo.admin.ch/ch.meteoschweiz.prognosen/punktprognosen/COSMO-E-all-stations.csv", skip=24, na = "-999.0", sep = ";", nrows=1) |> select(-X)
forecast_data <- read.delim("https://data.geo.admin.ch/ch.meteoschweiz.prognosen/punktprognosen/COSMO-E-all-stations.csv", skip=27, na = "-999.0", sep = ";", header=F)
colnames(forecast_data) <- colnames(forecast_header)
forecast_moe <- forecast_data[1:ncol(forecast_data)-1] %>% mutate(time = ymd_hm(time, tz="CET")) |>
select(starts_with(c("stn", "time", "DURSUN"))) |>
filter(stn == "MOE") |>
na.omit()
View(forecast_moe)
View(forecast_header)
View(forecast_data)
runApp()
runApp()
selected_solardach$Electricity_Yield_Summer / 183
875 / 92
mean(weather_data$sunhours)
runApp()
selected_solardach$Electricity_Yield_Summer / 183
mean(weather_data$sunhours
d
mean(weather_data$sunhours)
875 / 92
runApp()
selected_solardach$Electricity_Yield_Summer / 183 / 24
mean(weather_data$sunhours) / (875 / 92)
(selected_solardach$Electricity_Yield_Summer / 183 / 24) * (mean(weather_data$sunhours) / (875 / 92))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
myCustomEvent
input
runApp()
event
input$myCustomEvent
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input
runApp()
runApp()
runApp()
value
runApp()
runApp()
runApp()
value
value[1]
Q
runApp()
runApp()
runApp()
runApp()
value
runApp()
runApp()
value() != ""
runApp()
runApp()
value()
runApp()
runApp()
runApp()
is.null(value()
is.null(value())
runApp()
runApp()
value()
input
runApp()
runApp()
runApp()
runApp()
runApp()
input$Municipality
runApp()
runApp()
runApp()
input$Municipality
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("sf")
library("tidyverse")
library("sfarrow")
##Sisslerfeld
sisslerfeld <- read_sf("data-raw/swissboundaries3d_2023-01_2056_5728.shp/swissBOUNDARIES3D_1_4_TLM_HOHEITSGEBIET.shp",
query = "SELECT NAME as name FROM swissBOUNDARIES3D_1_4_TLM_HOHEITSGEBIET WHERE
NAME in ('Sisseln',	'Stein (AG)', 'MÃ¼nchwilen (AG)', 'Eiken')")
st_bbox(sisslerfeld)
st_bbox(sisslerfeld)  |>
st_as_sfc()  |>
st_as_text()
###Adress information
gebaeudeadressverzeichnis <- read_delim("data-raw/ch.swisstopo.amtliches-gebaeudeadressverzeichnis/pure_adr.csv") |>
select(BDG_EGID, STN_LABEL, ADR_NUMBER, ZIP_LABEL, COM_CANTON) |>
separate(ZIP_LABEL, c("ZIP", "MUNICIPALITY"), sep = "\\s(?=\\S)") |>
filter(ZIP %in% c("4334", "4332", "4333", "5074")) |>
group_by(BDG_EGID, STN_LABEL, ZIP, MUNICIPALITY, COM_CANTON) |>
summarize(ADR_NUMBER = paste(ADR_NUMBER, collapse = ", "))
#Existierende Solaranlagen
existing_solarroofs <- read_csv("data-raw/ch.bfe.elektrizitaetsproduktionsanlagen/ElectricityProductionPlant.csv") |>
drop_na("_x") |>
st_as_sf(coords = c("_x", "_y"), crs = 2056, remove = FALSE) |>
st_transform(4326)
##Solardach data
create_qr_code <- function(featureId) {
path <- file.path("www/qrcodes", paste0(featureId, ".png"))
if(!file.exists(path)) {
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
png(path, width = 200, height = 200, units = "px", bg = "white")
plot(qrcode)
dev.off()
}
file.path("qrcodes", paste0(featureId, ".png"))
}
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, STROMERTRAG_SOMMERHALBJAHR, STROMERTRAG_WINTERHALBJAHR, GWR_EGID, DF_UID) |> #For now we just use the Summer months
na.omit() |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
STROMERTRAG_SOMMERHALBJAHR = sum(STROMERTRAG_SOMMERHALBJAHR),
STROMERTRAG_WINTERHALBJAHR = sum(STROMERTRAG_WINTERHALBJAHR),
DF_UID = first(DF_UID)) |>
st_cast() |>
right_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG, Electricity_Yield_Summer = STROMERTRAG_SOMMERHALBJAHR, Electricity_Yield_Winter = STROMERTRAG_WINTERHALBJAHR) |>
rowwise() |>
mutate(qrcode = create_qr_code(DF_UID)) |>
ungroup() |>
st_transform(4326)
solardach$Has_Solar = st_intersects(solardach, existing_solarroofs) |> sapply(\(x)length(x)>0)
sisslerfeld <- sisslerfeld |>
st_transform(4326)
write_sf(solardach, "data-processed/prepared_data.gpkg", "solardach", delete_layer = TRUE)
#write_sf(solardach, "data-processed/solardach.geojson")
sfarrow::st_write_parquet(solardach,"data-processed/solardach.parquet")
write_sf(sisslerfeld, "data-processed/prepared_data.gpkg", "sisslerfeld", delete_layer = TRUE)
###Weather data
select_weather_icon <- function(input) {
if(input <= 2.0) {
"<i class='fa-solid fa-clouds fa-2xl' style='color: #919191;'></i>"
} else if (input > 2.0 & input <= 6.0) {
"<i class='fa-duotone fa-cloud-sun fa-2xl' style='--fa-primary-color: #919191; --fa-secondary-color: #d6ba00;'></i>"
} else {
"<i class='fa-solid fa-sun fa-2xl' style='color: #d6ba00;'></i>"
}
}
Sys.setlocale("LC_TIME", "en_US.UTF-8")
forecast_header <- read.delim("https://data.geo.admin.ch/ch.meteoschweiz.prognosen/punktprognosen/COSMO-E-all-stations.csv", skip=24, na = "-999.0", sep = ";", nrows=1) |> select(-X)
forecast_data <- read.delim("https://data.geo.admin.ch/ch.meteoschweiz.prognosen/punktprognosen/COSMO-E-all-stations.csv", skip=27, na = "-999.0", sep = ";", header=F)
colnames(forecast_data) <- colnames(forecast_header)
forecast_moe <- forecast_data[1:ncol(forecast_data)-1] %>% mutate(time = ymd_hm(time, tz="CET")) |>
select(starts_with(c("stn", "time", "DURSUN"))) |>
filter(stn == "MOE") |>
na.omit()
forecast_final <- mutate(forecast_moe, mean_col = rowMeans(select(forecast_moe, starts_with("DURSUN")), na.rm = TRUE)) |>
mutate(date = date(time)) |>
group_by(date) |>
summarise(sunhours = round(sum(mean_col) / 3600, 2)) |>
head(3) |>
mutate(icon = sapply(sunhours, select_weather_icon)) |>
mutate(date = format(date, format = "%a, %d. %b %Y")) |>
select(date, sunhours, icon)
write_csv(forecast_final, "data-processed/weather_data.csv", append = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
