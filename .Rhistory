paste("Current time:", format(Sys.time(), "%a, %d %b %Y %H:%M"))
})
solardach_index <- reactive({
if(!is.null(input$map_shape_click)){
idx <- input$map_shape_click$id
selected_solardach <- solardach |>
filter(solardach$GWR_EGID == idx)
leafletProxy("map", data = selected_solardach, session) |>
clearGroup("selected_solardach") |>
addPolygons(
fillOpacity = 0.5,
layerId = selected_solardach$GWR_EGID,
color = "red",
opacity = 1,
weight = 1,
group = "selected_solardach"
)
idx
} else {
1
}
})
##Generate isoline data
observeEvent(input$rayshade, {
car <- cars |> filter(model == input$car) #Get point of selected location
selected_solardach <- solardach |>
filter(solardach$GWR_EGID == solardach_index()) |>
st_centroid()
##TODO Berechung stimmt noch nicht
range_per_day_km <- (car$range_km / car$capacity_kwh) * (selected_solardach$STROMERTRAG / 365)
range_calc <- c(5, 3, 1) * ceiling(range_per_day_km)
range_calc <- ifelse(range_calc >= car$range_km, car$range_km, range_calc)
isolines <- hereR::isoline(
selected_solardach,
datetime = Sys.time(),
traffic = FALSE,
range = range_calc * 100,
range_type = "distance",
routing_mode = "short",
transport_mode = "car") |>
cbind(title = c("1 day", "3 day", "5 day"))
myPalette <- c("#ff8800", "#ffb700", "#fff700")
colorsSchema <- setNames(myPalette, c("1 day", "3 day", "5 day"))
pal <- colorFactor(colorsSchema, isolines$title)
bounds <- st_bbox(isolines) |> as.vector()
leafletProxy("map", data = isolines, session) |>
flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4]) |>
clearGroup("range_calc") |>
clearControls() |>
addPolygons(
fillColor = ~ pal(isolines$title),
fillOpacity = 0.2,
stroke = FALSE,
group = "range_calc"
) |>
addLegend(
"bottomright",
title = "Charging time (days)",
pal = pal,
values = isolines$title,
opacity = 1,
group = "range_calc"
) |>
addLayersControl(
overlayGroups = c("range_calc"),
options = layersControlOptions(collapsed = FALSE)
)
})
}
forecast_moe <- mutate(forecast_moe, mean_col = rowMeans(select(forecast_moe, starts_with("DURSUN")), na.rm = TRUE)) |>
mutate(day = day(time)) |>
group_by(day) |>
summarise(total = sum(mean_col)) |>
mutate(wkday = wday(time, label=TRUE))
forecast_moe <- mutate(forecast_moe, mean_col = rowMeans(select(forecast_moe, starts_with("DURSUN")), na.rm = TRUE)) |>
mutate(day = day(time)) |>
group_by(day) |>
summarise(total = sum(mean_col)) |>
mutate(wkday = wday(day, label=TRUE))
forecast_moe
forecast_moe <- forecast_data[1:ncol(forecast_data)-1] %>% mutate(time = ymd_hm(time, tz="CET")) |>
select(starts_with(c("stn", "time", "DURSUN"))) |>
filter(stn == "MOE") |>
na.omit()
forecast_moe <- mutate(forecast_moe, mean_col = rowMeans(select(forecast_moe, starts_with("DURSUN")), na.rm = TRUE)) |>
mutate(date = date(time)) |>
group_by(date) |>
summarise(total = sum(mean_col)) |>
mutate(wkday = wday(date, label=TRUE))
forecast_moe
View(forecast_moe)
forecast_moe <- forecast_data[1:ncol(forecast_data)-1] %>% mutate(time = ymd_hm(time, tz="CET")) |>
select(starts_with(c("stn", "time", "DURSUN"))) |>
filter(stn == "MOE") |>
na.omit()
forecast_moe <- mutate(forecast_moe, mean_col = rowMeans(select(forecast_moe, starts_with("DURSUN")), na.rm = TRUE)) |>
mutate(date = date(time)) |>
group_by(date) |>
summarise(total = sum(mean_col)) |>
mutate(wkday = wday(date, label=TRUE, abbr = TRUE,))
forecast_moe <- forecast_data[1:ncol(forecast_data)-1] %>% mutate(time = ymd_hm(time, tz="CET")) |>
select(starts_with(c("stn", "time", "DURSUN"))) |>
filter(stn == "MOE") |>
na.omit()
forecast_final <- mutate(forecast_moe, mean_col = rowMeans(select(forecast_moe, starts_with("DURSUN")), na.rm = TRUE)) |>
mutate(date = date(time)) |>
group_by(date) |>
summarise(total = sum(mean_col)) |>
mutate(wkday = wday(date, label=TRUE, abbr = TRUE))
forecast_final
forecast_final
forecast_final <- mutate(forecast_moe, mean_col = rowMeans(select(forecast_moe, starts_with("DURSUN")), na.rm = TRUE)) |>
mutate(date = date(time)) |>
group_by(date) |>
summarise(total = sum(mean_col)) |>
mutate(wkday = wday(date, label = TRUE, abbr = FALSE))
forecast_final
forecast_final <- mutate(forecast_moe, mean_col = rowMeans(select(forecast_moe, starts_with("DURSUN")), na.rm = TRUE)) |>
mutate(date = date(time)) |>
group_by(date) |>
summarise(total = sum(mean_col)) |>
mutate(wkday = wday(date, label = TRUE, abbr = FALSE)) |>
head(3)
forecast_final
shiny::runApp()
runApp()
runApp()
runApp()
forecast_final |>
t() |>
kable(format = "html", escape = F) |>
kable_styling(bootstrap_options = "striped")
forecast_final |>
t()
runApp()
shiny::runApp()
solardach <- sfarrow::st_read_parquet("data-processed/solardach.parquet")
View(solardach)
shiny::runApp()
runApp()
range_calc
runApp()
range_calc
range_calc
runApp()
runApp()
range_calc
car$range_km
range_calc
range_per_day_km
runApp()
range_calc
range_per_day_km
runApp()
range_per_day_km
range_calc
shiny::runApp()
shiny::runApp()
ui_main <- fluidPage(
titlePanel("EnergyKiosk"),
sidebarLayout(
mainPanel(
h3("Choose a page:"),
actionButton("page1Button", "Solar Challenge"),
actionButton("page2Button", "Electric car")
)
)
)
shiny::runApp()
shiny::runApp()
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
featureId = 1231243
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
plot(qrcode)
qrcode
str(qrcode)
runApp()
runApp()
##Solardach data
create_qr_code <- function(featureId) {
path <- "www/qrcodes"
if(file.exists(file.path(path, paste0(featureid, ".png")))) {
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
png(paste0(path, featureId, ".png"), width = 200, height = 200, units = "px", bg = "white")
plot(qrcode)
dev.off()
}
normalizePath(path, winslash = "/", mustWork = NA)
}
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
head(10) |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
mutate(qrcode = qrcode(DF_UID)) |>
st_transform(4326)
###Adress information
gebaeudeadressverzeichnis <- read_delim("data-raw/ch.swisstopo.amtliches-gebaeudeadressverzeichnis/pure_adr.csv") |>
select(BDG_EGID, STN_LABEL, ADR_NUMBER, ZIP_LABEL, COM_CANTON) |>
separate(ZIP_LABEL, c("ZIP", "MUNICIPALITY"), sep = "\\s(?=\\S)") |>
filter(ZIP %in% c("4334", "4332", "4333", "5074")) |>
group_by(BDG_EGID, STN_LABEL, ZIP, MUNICIPALITY, COM_CANTON) |>
summarize(ADR_NUMBER = paste(ADR_NUMBER, collapse = ", "))
#Existierende Solaranlagen
existing_solarroofs <- read_csv("data-raw/ch.bfe.elektrizitaetsproduktionsanlagen/ElectricityProductionPlant.csv") |>
drop_na("_x") |>
st_as_sf(coords = c("_x", "_y"), crs = 2056, remove = FALSE) |>
st_transform(4326)
##Solardach data
create_qr_code <- function(featureId) {
path <- "www/qrcodes"
if(file.exists(file.path(path, paste0(featureid, ".png")))) {
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
png(paste0(path, featureId, ".png"), width = 200, height = 200, units = "px", bg = "white")
plot(qrcode)
dev.off()
}
normalizePath(path, winslash = "/", mustWork = NA)
}
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
head(10) |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
mutate(qrcode = qrcode(DF_UID)) |>
st_transform(4326)
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
head(10) |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
mutate(qrcode = create_qr_code(DF_UID)) |>
st_transform(4326)
##Solardach data
create_qr_code <- function(featureId) {
path <- "www/qrcodes"
if(file.exists(file.path(path, paste0(featureId, ".png")))) {
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
png(paste0(path, featureId, ".png"), width = 200, height = 200, units = "px", bg = "white")
plot(qrcode)
dev.off()
}
normalizePath(path, winslash = "/", mustWork = NA)
}
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
head(10) |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
mutate(qrcode = create_qr_code(DF_UID)) |>
st_transform(4326)
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
head(10) |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
rowwise() |>
mutate(qrcode = create_qr_code(DF_UID)) |>
ungroup() |>
st_transform(4326)
View(solardach)
##Solardach data
create_qr_code <- function(featureId) {
path <- file.path("www/qrcodes", paste0(featureId, ".png"))
if(!file.exists(path)) {
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
png(path, width = 200, height = 200, units = "px", bg = "white")
plot(qrcode)
dev.off()
}
path
}
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
head(10) |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
rowwise() |>
mutate(qrcode = create_qr_code(DF_UID)) |>
ungroup() |>
st_transform(4326)
View(solardach)
##Solardach data
create_qr_code <- function(featureId) {
path <- file.path("www/qrcodes", paste0(featureId, ".png"))
if(!file.exists(path)) {
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
png(path, width = 200, height = 200, units = "px", bg = "white")
plot(qrcode)
dev.off()
}
path
}
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
rowwise() |>
mutate(qrcode = create_qr_code(DF_UID)) |>
ungroup() |>
st_transform(4326)
solardach$Has_Solar = st_intersects(solardach, existing_solarroofs) |> sapply(\(x)length(x)>0)
sisslerfeld <- sisslerfeld |>
st_transform(4326)
##Sisslerfeld
sisslerfeld <- read_sf("data-raw/swissboundaries3d_2023-01_2056_5728.shp/swissBOUNDARIES3D_1_4_TLM_HOHEITSGEBIET.shp",
query = "SELECT NAME as name FROM swissBOUNDARIES3D_1_4_TLM_HOHEITSGEBIET WHERE
NAME in ('Sisseln',	'Stein (AG)', 'Münchwilen (AG)', 'Eiken')")
st_bbox(sisslerfeld)
st_bbox(sisslerfeld)  |>
st_as_sfc()  |>
st_as_text()
write_sf(solardach, "data-processed/prepared_data.gpkg", "solardach", delete_layer = TRUE)
sisslerfeld <- sisslerfeld |>
st_transform(4326)
write_sf(solardach, "data-processed/prepared_data.gpkg", "solardach", delete_layer = TRUE)
write_sf(solardach, "data-processed/solardach.geojson")
sfarrow::st_write_parquet(solardach,"data-processed/solardach.parquet")
write_sf(sisslerfeld, "data-processed/prepared_data.gpkg", "sisslerfeld", delete_layer = TRUE)
###Weather data
select_weather_icon <- function(input) {
if(input <= 2.0) {
"clouds"
} else if (input > 2.0 & input <= 6.0) {
"sun-cloud"
} else {
"sun"
}
}
forecast_header <- read.delim("https://data.geo.admin.ch/ch.meteoschweiz.prognosen/punktprognosen/COSMO-E-all-stations.csv", skip=24, na = "-999.0", sep = ";", nrows=1) |> select(-X)
forecast_data <- read.delim("https://data.geo.admin.ch/ch.meteoschweiz.prognosen/punktprognosen/COSMO-E-all-stations.csv", skip=27, na = "-999.0", sep = ";", header=F)
colnames(forecast_data) <- colnames(forecast_header)
forecast_moe <- forecast_data[1:ncol(forecast_data)-1] %>% mutate(time = ymd_hm(time, tz="CET")) |>
select(starts_with(c("stn", "time", "DURSUN"))) |>
filter(stn == "MOE") |>
na.omit()
forecast_final <- mutate(forecast_moe, mean_col = rowMeans(select(forecast_moe, starts_with("DURSUN")), na.rm = TRUE)) |>
mutate(date = date(time)) |>
mutate(wkday = wday(date, label = TRUE, abbr = FALSE)) |>
group_by(date, wkday) |>
summarise(sunhours = round(sum(mean_col) / 3600, 2)) |>
head(3) |>
mutate(icon = sapply(sunhours, select_weather_icon))
write_csv(forecast_final, "data-processed/weather_data.csv", append = FALSE)
runApp()
runApp()
runApp()
?gwd
??gwd
runApp()
##Solardach data
create_qr_code <- function(featureId) {
path <- file.path("/www/qrcodes", paste0(featureId, ".png"))
if(!file.exists(path)) {
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
png(path, width = 200, height = 200, units = "px", bg = "white")
plot(qrcode)
dev.off()
}
path
}
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
rowwise() |>
mutate(qrcode = create_qr_code(DF_UID)) |>
ungroup() |>
st_transform(4326)
##Solardach data
create_qr_code <- function(featureId) {
path <- file.path("www/qrcodes", paste0(featureId, ".png"))
if(!file.exists(path)) {
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
png(path, width = 200, height = 200, units = "px", bg = "white")
plot(qrcode)
dev.off()
}
path
}
runApp()
runApp()
##Solardach data
create_qr_code <- function(featureId) {
path <- file.path("www/qrcodes", paste0(featureId, ".png"))
if(!file.exists(path)) {
qrcode <- qr_code(paste0("https://www.uvek-gis.admin.ch/BFE/sonnendach/index.html?featureId=", featureId, "&lang=de"))
png(path, width = 200, height = 200, units = "px", bg = "white")
plot(qrcode)
dev.off()
}
file.path("qrcodes", paste0(featureId, ".png"))
}
solardach <- read_sf("data-raw/solarenergie-eignung-daecher_2056.gpkg/SOLKAT_DACH.gpkg",
query = "SELECT st_intersection(solar.geom, sisslerfeld.geom) as geom_intersect, * FROM (
SELECT * FROM SOLKAT_CH_DACH) solar, (
SELECT ST_PolygonFromText('POLYGON((2637380 1263691, 2642887 1263691, 2642887 1267625, 2637380 1267625, 2637380 1263691))') as geom) sisslerfeld
WHERE ST_intersects(solar.geom, sisslerfeld.geom)") |>
select(FLAECHE, STROMERTRAG, GWR_EGID, DF_UID) |>
na.omit() |>
group_by(GWR_EGID) |>
summarise(
FLAECHE = round(sum(FLAECHE), 0),
STROMERTRAG = sum(STROMERTRAG),
DF_UID = first(DF_UID)) |>
st_cast() |>
left_join(gebaeudeadressverzeichnis, by = c("GWR_EGID" = "BDG_EGID")) |>
rename(Street = STN_LABEL, Number = ADR_NUMBER, Area = FLAECHE, Municipality = MUNICIPALITY, Canton = COM_CANTON, Electricity_Yield = STROMERTRAG) |>
rowwise() |>
mutate(qrcode = create_qr_code(DF_UID)) |>
ungroup() |>
st_transform(4326)
write_sf(solardach, "data-processed/prepared_data.gpkg", "solardach", delete_layer = TRUE)
write_sf(solardach, "data-processed/solardach.geojson")
sfarrow::st_write_parquet(solardach,"data-processed/solardach.parquet")
write_sf(sisslerfeld, "data-processed/prepared_data.gpkg", "sisslerfeld", delete_layer = TRUE)
runApp()
solardach$Has_Solar = st_intersects(solardach, existing_solarroofs) |> sapply(\(x)length(x)>0)
write_sf(solardach, "data-processed/prepared_data.gpkg", "solardach", delete_layer = TRUE)
sfarrow::st_write_parquet(solardach,"data-processed/solardach.parquet")
write_sf(sisslerfeld, "data-processed/prepared_data.gpkg", "sisslerfeld", delete_layer = TRUE)
runApp()
runApp()
runApp()
